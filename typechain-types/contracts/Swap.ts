/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import type {
  BaseContract,
  BigNumber,
  BigNumberish,
  BytesLike,
  CallOverrides,
  ContractTransaction,
  Overrides,
  PopulatedTransaction,
  Signer,
  utils,
} from "ethers";
import type {
  FunctionFragment,
  Result,
  EventFragment,
} from "@ethersproject/abi";
import type { Listener, Provider } from "@ethersproject/providers";
import type {
  TypedEventFilter,
  TypedEvent,
  TypedListener,
  OnEvent,
  PromiseOrValue,
} from "../common";

export interface SwapInterface extends utils.Interface {
  functions: {
    "DOMAIN_CHAIN_ID()": FunctionFragment;
    "DOMAIN_NAME()": FunctionFragment;
    "DOMAIN_SEPARATOR()": FunctionFragment;
    "DOMAIN_TYPEHASH()": FunctionFragment;
    "DOMAIN_VERSION()": FunctionFragment;
    "FEE_DIVISOR()": FunctionFragment;
    "ORDER_TYPEHASH()": FunctionFragment;
    "authorize(address)": FunctionFragment;
    "authorized(address)": FunctionFragment;
    "calculateDiscount(uint256,uint256)": FunctionFragment;
    "calculateProtocolFee(address,uint256)": FunctionFragment;
    "cancel(uint256[])": FunctionFragment;
    "check(address,uint256,uint256,address,address,uint256,address,uint256,uint8,bytes32,bytes32)": FunctionFragment;
    "getChainId()": FunctionFragment;
    "nonceUsed(address,uint256)": FunctionFragment;
    "owner()": FunctionFragment;
    "protocolFee()": FunctionFragment;
    "protocolFeeLight()": FunctionFragment;
    "protocolFeeWallet()": FunctionFragment;
    "rebateMax()": FunctionFragment;
    "rebateScale()": FunctionFragment;
    "renounceOwnership()": FunctionFragment;
    "revoke()": FunctionFragment;
    "setProtocolFee(uint256)": FunctionFragment;
    "setProtocolFeeLight(uint256)": FunctionFragment;
    "setProtocolFeeWallet(address)": FunctionFragment;
    "setRebateMax(uint256)": FunctionFragment;
    "setRebateScale(uint256)": FunctionFragment;
    "setStaking(address)": FunctionFragment;
    "staking()": FunctionFragment;
    "swap(address,uint256,uint256,address,address,uint256,address,uint256,uint8,bytes32,bytes32)": FunctionFragment;
    "swapAnySender(address,uint256,uint256,address,address,uint256,address,uint256,uint8,bytes32,bytes32)": FunctionFragment;
    "swapLight(uint256,uint256,address,address,uint256,address,uint256,uint8,bytes32,bytes32)": FunctionFragment;
    "transferOwnership(address)": FunctionFragment;
  };

  getFunction(
    nameOrSignatureOrTopic:
      | "DOMAIN_CHAIN_ID"
      | "DOMAIN_NAME"
      | "DOMAIN_SEPARATOR"
      | "DOMAIN_TYPEHASH"
      | "DOMAIN_VERSION"
      | "FEE_DIVISOR"
      | "ORDER_TYPEHASH"
      | "authorize"
      | "authorized"
      | "calculateDiscount"
      | "calculateProtocolFee"
      | "cancel"
      | "check"
      | "getChainId"
      | "nonceUsed"
      | "owner"
      | "protocolFee"
      | "protocolFeeLight"
      | "protocolFeeWallet"
      | "rebateMax"
      | "rebateScale"
      | "renounceOwnership"
      | "revoke"
      | "setProtocolFee"
      | "setProtocolFeeLight"
      | "setProtocolFeeWallet"
      | "setRebateMax"
      | "setRebateScale"
      | "setStaking"
      | "staking"
      | "swap"
      | "swapAnySender"
      | "swapLight"
      | "transferOwnership"
  ): FunctionFragment;

  encodeFunctionData(
    functionFragment: "DOMAIN_CHAIN_ID",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "DOMAIN_NAME",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "DOMAIN_SEPARATOR",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "DOMAIN_TYPEHASH",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "DOMAIN_VERSION",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "FEE_DIVISOR",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "ORDER_TYPEHASH",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "authorize",
    values: [PromiseOrValue<string>]
  ): string;
  encodeFunctionData(
    functionFragment: "authorized",
    values: [PromiseOrValue<string>]
  ): string;
  encodeFunctionData(
    functionFragment: "calculateDiscount",
    values: [PromiseOrValue<BigNumberish>, PromiseOrValue<BigNumberish>]
  ): string;
  encodeFunctionData(
    functionFragment: "calculateProtocolFee",
    values: [PromiseOrValue<string>, PromiseOrValue<BigNumberish>]
  ): string;
  encodeFunctionData(
    functionFragment: "cancel",
    values: [PromiseOrValue<BigNumberish>[]]
  ): string;
  encodeFunctionData(
    functionFragment: "check",
    values: [
      PromiseOrValue<string>,
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<string>,
      PromiseOrValue<string>,
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<string>,
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<BytesLike>,
      PromiseOrValue<BytesLike>
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "getChainId",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "nonceUsed",
    values: [PromiseOrValue<string>, PromiseOrValue<BigNumberish>]
  ): string;
  encodeFunctionData(functionFragment: "owner", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "protocolFee",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "protocolFeeLight",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "protocolFeeWallet",
    values?: undefined
  ): string;
  encodeFunctionData(functionFragment: "rebateMax", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "rebateScale",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "renounceOwnership",
    values?: undefined
  ): string;
  encodeFunctionData(functionFragment: "revoke", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "setProtocolFee",
    values: [PromiseOrValue<BigNumberish>]
  ): string;
  encodeFunctionData(
    functionFragment: "setProtocolFeeLight",
    values: [PromiseOrValue<BigNumberish>]
  ): string;
  encodeFunctionData(
    functionFragment: "setProtocolFeeWallet",
    values: [PromiseOrValue<string>]
  ): string;
  encodeFunctionData(
    functionFragment: "setRebateMax",
    values: [PromiseOrValue<BigNumberish>]
  ): string;
  encodeFunctionData(
    functionFragment: "setRebateScale",
    values: [PromiseOrValue<BigNumberish>]
  ): string;
  encodeFunctionData(
    functionFragment: "setStaking",
    values: [PromiseOrValue<string>]
  ): string;
  encodeFunctionData(functionFragment: "staking", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "swap",
    values: [
      PromiseOrValue<string>,
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<string>,
      PromiseOrValue<string>,
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<string>,
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<BytesLike>,
      PromiseOrValue<BytesLike>
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "swapAnySender",
    values: [
      PromiseOrValue<string>,
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<string>,
      PromiseOrValue<string>,
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<string>,
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<BytesLike>,
      PromiseOrValue<BytesLike>
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "swapLight",
    values: [
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<string>,
      PromiseOrValue<string>,
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<string>,
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<BytesLike>,
      PromiseOrValue<BytesLike>
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "transferOwnership",
    values: [PromiseOrValue<string>]
  ): string;

  decodeFunctionResult(
    functionFragment: "DOMAIN_CHAIN_ID",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "DOMAIN_NAME",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "DOMAIN_SEPARATOR",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "DOMAIN_TYPEHASH",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "DOMAIN_VERSION",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "FEE_DIVISOR",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "ORDER_TYPEHASH",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "authorize", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "authorized", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "calculateDiscount",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "calculateProtocolFee",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "cancel", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "check", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "getChainId", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "nonceUsed", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "owner", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "protocolFee",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "protocolFeeLight",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "protocolFeeWallet",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "rebateMax", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "rebateScale",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "renounceOwnership",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "revoke", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "setProtocolFee",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setProtocolFeeLight",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setProtocolFeeWallet",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setRebateMax",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setRebateScale",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "setStaking", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "staking", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "swap", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "swapAnySender",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "swapLight", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "transferOwnership",
    data: BytesLike
  ): Result;

  events: {
    "Authorize(address,address)": EventFragment;
    "Cancel(uint256,address)": EventFragment;
    "OwnershipTransferred(address,address)": EventFragment;
    "Revoke(address,address)": EventFragment;
    "SetProtocolFee(uint256)": EventFragment;
    "SetProtocolFeeLight(uint256)": EventFragment;
    "SetProtocolFeeWallet(address)": EventFragment;
    "SetRebateMax(uint256)": EventFragment;
    "SetRebateScale(uint256)": EventFragment;
    "SetStaking(address)": EventFragment;
    "Swap(uint256,uint256,address,address,uint256,uint256,address,address,uint256)": EventFragment;
  };

  getEvent(nameOrSignatureOrTopic: "Authorize"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "Cancel"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "OwnershipTransferred"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "Revoke"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "SetProtocolFee"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "SetProtocolFeeLight"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "SetProtocolFeeWallet"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "SetRebateMax"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "SetRebateScale"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "SetStaking"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "Swap"): EventFragment;
}

export interface AuthorizeEventObject {
  signer: string;
  signerWallet: string;
}
export type AuthorizeEvent = TypedEvent<[string, string], AuthorizeEventObject>;

export type AuthorizeEventFilter = TypedEventFilter<AuthorizeEvent>;

export interface CancelEventObject {
  nonce: BigNumber;
  signerWallet: string;
}
export type CancelEvent = TypedEvent<[BigNumber, string], CancelEventObject>;

export type CancelEventFilter = TypedEventFilter<CancelEvent>;

export interface OwnershipTransferredEventObject {
  previousOwner: string;
  newOwner: string;
}
export type OwnershipTransferredEvent = TypedEvent<
  [string, string],
  OwnershipTransferredEventObject
>;

export type OwnershipTransferredEventFilter =
  TypedEventFilter<OwnershipTransferredEvent>;

export interface RevokeEventObject {
  signer: string;
  signerWallet: string;
}
export type RevokeEvent = TypedEvent<[string, string], RevokeEventObject>;

export type RevokeEventFilter = TypedEventFilter<RevokeEvent>;

export interface SetProtocolFeeEventObject {
  protocolFee: BigNumber;
}
export type SetProtocolFeeEvent = TypedEvent<
  [BigNumber],
  SetProtocolFeeEventObject
>;

export type SetProtocolFeeEventFilter = TypedEventFilter<SetProtocolFeeEvent>;

export interface SetProtocolFeeLightEventObject {
  protocolFeeLight: BigNumber;
}
export type SetProtocolFeeLightEvent = TypedEvent<
  [BigNumber],
  SetProtocolFeeLightEventObject
>;

export type SetProtocolFeeLightEventFilter =
  TypedEventFilter<SetProtocolFeeLightEvent>;

export interface SetProtocolFeeWalletEventObject {
  feeWallet: string;
}
export type SetProtocolFeeWalletEvent = TypedEvent<
  [string],
  SetProtocolFeeWalletEventObject
>;

export type SetProtocolFeeWalletEventFilter =
  TypedEventFilter<SetProtocolFeeWalletEvent>;

export interface SetRebateMaxEventObject {
  rebateMax: BigNumber;
}
export type SetRebateMaxEvent = TypedEvent<
  [BigNumber],
  SetRebateMaxEventObject
>;

export type SetRebateMaxEventFilter = TypedEventFilter<SetRebateMaxEvent>;

export interface SetRebateScaleEventObject {
  rebateScale: BigNumber;
}
export type SetRebateScaleEvent = TypedEvent<
  [BigNumber],
  SetRebateScaleEventObject
>;

export type SetRebateScaleEventFilter = TypedEventFilter<SetRebateScaleEvent>;

export interface SetStakingEventObject {
  staking: string;
}
export type SetStakingEvent = TypedEvent<[string], SetStakingEventObject>;

export type SetStakingEventFilter = TypedEventFilter<SetStakingEvent>;

export interface SwapEventObject {
  nonce: BigNumber;
  timestamp: BigNumber;
  signerWallet: string;
  signerToken: string;
  signerAmount: BigNumber;
  protocolFee: BigNumber;
  senderWallet: string;
  senderToken: string;
  senderAmount: BigNumber;
}
export type SwapEvent = TypedEvent<
  [
    BigNumber,
    BigNumber,
    string,
    string,
    BigNumber,
    BigNumber,
    string,
    string,
    BigNumber
  ],
  SwapEventObject
>;

export type SwapEventFilter = TypedEventFilter<SwapEvent>;

export interface Swap extends BaseContract {
  connect(signerOrProvider: Signer | Provider | string): this;
  attach(addressOrName: string): this;
  deployed(): Promise<this>;

  interface: SwapInterface;

  queryFilter<TEvent extends TypedEvent>(
    event: TypedEventFilter<TEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TEvent>>;

  listeners<TEvent extends TypedEvent>(
    eventFilter?: TypedEventFilter<TEvent>
  ): Array<TypedListener<TEvent>>;
  listeners(eventName?: string): Array<Listener>;
  removeAllListeners<TEvent extends TypedEvent>(
    eventFilter: TypedEventFilter<TEvent>
  ): this;
  removeAllListeners(eventName?: string): this;
  off: OnEvent<this>;
  on: OnEvent<this>;
  once: OnEvent<this>;
  removeListener: OnEvent<this>;

  functions: {
    DOMAIN_CHAIN_ID(overrides?: CallOverrides): Promise<[BigNumber]>;

    DOMAIN_NAME(overrides?: CallOverrides): Promise<[string]>;

    DOMAIN_SEPARATOR(overrides?: CallOverrides): Promise<[string]>;

    DOMAIN_TYPEHASH(overrides?: CallOverrides): Promise<[string]>;

    DOMAIN_VERSION(overrides?: CallOverrides): Promise<[string]>;

    FEE_DIVISOR(overrides?: CallOverrides): Promise<[BigNumber]>;

    ORDER_TYPEHASH(overrides?: CallOverrides): Promise<[string]>;

    authorize(
      signer: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    authorized(
      arg0: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<[string]>;

    calculateDiscount(
      stakingBalance: PromiseOrValue<BigNumberish>,
      feeAmount: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    calculateProtocolFee(
      wallet: PromiseOrValue<string>,
      amount: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    cancel(
      nonces: PromiseOrValue<BigNumberish>[],
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    check(
      senderWallet: PromiseOrValue<string>,
      nonce: PromiseOrValue<BigNumberish>,
      expiry: PromiseOrValue<BigNumberish>,
      signerWallet: PromiseOrValue<string>,
      signerToken: PromiseOrValue<string>,
      signerAmount: PromiseOrValue<BigNumberish>,
      senderToken: PromiseOrValue<string>,
      senderAmount: PromiseOrValue<BigNumberish>,
      v: PromiseOrValue<BigNumberish>,
      r: PromiseOrValue<BytesLike>,
      s: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<[BigNumber, string[]]>;

    getChainId(
      overrides?: CallOverrides
    ): Promise<[BigNumber] & { id: BigNumber }>;

    nonceUsed(
      signer: PromiseOrValue<string>,
      nonce: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<[boolean]>;

    owner(overrides?: CallOverrides): Promise<[string]>;

    protocolFee(overrides?: CallOverrides): Promise<[BigNumber]>;

    protocolFeeLight(overrides?: CallOverrides): Promise<[BigNumber]>;

    protocolFeeWallet(overrides?: CallOverrides): Promise<[string]>;

    rebateMax(overrides?: CallOverrides): Promise<[BigNumber]>;

    rebateScale(overrides?: CallOverrides): Promise<[BigNumber]>;

    renounceOwnership(
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    revoke(
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    setProtocolFee(
      _protocolFee: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    setProtocolFeeLight(
      _protocolFeeLight: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    setProtocolFeeWallet(
      _protocolFeeWallet: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    setRebateMax(
      _rebateMax: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    setRebateScale(
      _rebateScale: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    setStaking(
      newstaking: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    staking(overrides?: CallOverrides): Promise<[string]>;

    swap(
      recipient: PromiseOrValue<string>,
      nonce: PromiseOrValue<BigNumberish>,
      expiry: PromiseOrValue<BigNumberish>,
      signerWallet: PromiseOrValue<string>,
      signerToken: PromiseOrValue<string>,
      signerAmount: PromiseOrValue<BigNumberish>,
      senderToken: PromiseOrValue<string>,
      senderAmount: PromiseOrValue<BigNumberish>,
      v: PromiseOrValue<BigNumberish>,
      r: PromiseOrValue<BytesLike>,
      s: PromiseOrValue<BytesLike>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    swapAnySender(
      recipient: PromiseOrValue<string>,
      nonce: PromiseOrValue<BigNumberish>,
      expiry: PromiseOrValue<BigNumberish>,
      signerWallet: PromiseOrValue<string>,
      signerToken: PromiseOrValue<string>,
      signerAmount: PromiseOrValue<BigNumberish>,
      senderToken: PromiseOrValue<string>,
      senderAmount: PromiseOrValue<BigNumberish>,
      v: PromiseOrValue<BigNumberish>,
      r: PromiseOrValue<BytesLike>,
      s: PromiseOrValue<BytesLike>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    swapLight(
      nonce: PromiseOrValue<BigNumberish>,
      expiry: PromiseOrValue<BigNumberish>,
      signerWallet: PromiseOrValue<string>,
      signerToken: PromiseOrValue<string>,
      signerAmount: PromiseOrValue<BigNumberish>,
      senderToken: PromiseOrValue<string>,
      senderAmount: PromiseOrValue<BigNumberish>,
      v: PromiseOrValue<BigNumberish>,
      r: PromiseOrValue<BytesLike>,
      s: PromiseOrValue<BytesLike>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    transferOwnership(
      newOwner: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;
  };

  DOMAIN_CHAIN_ID(overrides?: CallOverrides): Promise<BigNumber>;

  DOMAIN_NAME(overrides?: CallOverrides): Promise<string>;

  DOMAIN_SEPARATOR(overrides?: CallOverrides): Promise<string>;

  DOMAIN_TYPEHASH(overrides?: CallOverrides): Promise<string>;

  DOMAIN_VERSION(overrides?: CallOverrides): Promise<string>;

  FEE_DIVISOR(overrides?: CallOverrides): Promise<BigNumber>;

  ORDER_TYPEHASH(overrides?: CallOverrides): Promise<string>;

  authorize(
    signer: PromiseOrValue<string>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  authorized(
    arg0: PromiseOrValue<string>,
    overrides?: CallOverrides
  ): Promise<string>;

  calculateDiscount(
    stakingBalance: PromiseOrValue<BigNumberish>,
    feeAmount: PromiseOrValue<BigNumberish>,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  calculateProtocolFee(
    wallet: PromiseOrValue<string>,
    amount: PromiseOrValue<BigNumberish>,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  cancel(
    nonces: PromiseOrValue<BigNumberish>[],
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  check(
    senderWallet: PromiseOrValue<string>,
    nonce: PromiseOrValue<BigNumberish>,
    expiry: PromiseOrValue<BigNumberish>,
    signerWallet: PromiseOrValue<string>,
    signerToken: PromiseOrValue<string>,
    signerAmount: PromiseOrValue<BigNumberish>,
    senderToken: PromiseOrValue<string>,
    senderAmount: PromiseOrValue<BigNumberish>,
    v: PromiseOrValue<BigNumberish>,
    r: PromiseOrValue<BytesLike>,
    s: PromiseOrValue<BytesLike>,
    overrides?: CallOverrides
  ): Promise<[BigNumber, string[]]>;

  getChainId(overrides?: CallOverrides): Promise<BigNumber>;

  nonceUsed(
    signer: PromiseOrValue<string>,
    nonce: PromiseOrValue<BigNumberish>,
    overrides?: CallOverrides
  ): Promise<boolean>;

  owner(overrides?: CallOverrides): Promise<string>;

  protocolFee(overrides?: CallOverrides): Promise<BigNumber>;

  protocolFeeLight(overrides?: CallOverrides): Promise<BigNumber>;

  protocolFeeWallet(overrides?: CallOverrides): Promise<string>;

  rebateMax(overrides?: CallOverrides): Promise<BigNumber>;

  rebateScale(overrides?: CallOverrides): Promise<BigNumber>;

  renounceOwnership(
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  revoke(
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  setProtocolFee(
    _protocolFee: PromiseOrValue<BigNumberish>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  setProtocolFeeLight(
    _protocolFeeLight: PromiseOrValue<BigNumberish>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  setProtocolFeeWallet(
    _protocolFeeWallet: PromiseOrValue<string>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  setRebateMax(
    _rebateMax: PromiseOrValue<BigNumberish>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  setRebateScale(
    _rebateScale: PromiseOrValue<BigNumberish>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  setStaking(
    newstaking: PromiseOrValue<string>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  staking(overrides?: CallOverrides): Promise<string>;

  swap(
    recipient: PromiseOrValue<string>,
    nonce: PromiseOrValue<BigNumberish>,
    expiry: PromiseOrValue<BigNumberish>,
    signerWallet: PromiseOrValue<string>,
    signerToken: PromiseOrValue<string>,
    signerAmount: PromiseOrValue<BigNumberish>,
    senderToken: PromiseOrValue<string>,
    senderAmount: PromiseOrValue<BigNumberish>,
    v: PromiseOrValue<BigNumberish>,
    r: PromiseOrValue<BytesLike>,
    s: PromiseOrValue<BytesLike>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  swapAnySender(
    recipient: PromiseOrValue<string>,
    nonce: PromiseOrValue<BigNumberish>,
    expiry: PromiseOrValue<BigNumberish>,
    signerWallet: PromiseOrValue<string>,
    signerToken: PromiseOrValue<string>,
    signerAmount: PromiseOrValue<BigNumberish>,
    senderToken: PromiseOrValue<string>,
    senderAmount: PromiseOrValue<BigNumberish>,
    v: PromiseOrValue<BigNumberish>,
    r: PromiseOrValue<BytesLike>,
    s: PromiseOrValue<BytesLike>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  swapLight(
    nonce: PromiseOrValue<BigNumberish>,
    expiry: PromiseOrValue<BigNumberish>,
    signerWallet: PromiseOrValue<string>,
    signerToken: PromiseOrValue<string>,
    signerAmount: PromiseOrValue<BigNumberish>,
    senderToken: PromiseOrValue<string>,
    senderAmount: PromiseOrValue<BigNumberish>,
    v: PromiseOrValue<BigNumberish>,
    r: PromiseOrValue<BytesLike>,
    s: PromiseOrValue<BytesLike>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  transferOwnership(
    newOwner: PromiseOrValue<string>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  callStatic: {
    DOMAIN_CHAIN_ID(overrides?: CallOverrides): Promise<BigNumber>;

    DOMAIN_NAME(overrides?: CallOverrides): Promise<string>;

    DOMAIN_SEPARATOR(overrides?: CallOverrides): Promise<string>;

    DOMAIN_TYPEHASH(overrides?: CallOverrides): Promise<string>;

    DOMAIN_VERSION(overrides?: CallOverrides): Promise<string>;

    FEE_DIVISOR(overrides?: CallOverrides): Promise<BigNumber>;

    ORDER_TYPEHASH(overrides?: CallOverrides): Promise<string>;

    authorize(
      signer: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<void>;

    authorized(
      arg0: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<string>;

    calculateDiscount(
      stakingBalance: PromiseOrValue<BigNumberish>,
      feeAmount: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    calculateProtocolFee(
      wallet: PromiseOrValue<string>,
      amount: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    cancel(
      nonces: PromiseOrValue<BigNumberish>[],
      overrides?: CallOverrides
    ): Promise<void>;

    check(
      senderWallet: PromiseOrValue<string>,
      nonce: PromiseOrValue<BigNumberish>,
      expiry: PromiseOrValue<BigNumberish>,
      signerWallet: PromiseOrValue<string>,
      signerToken: PromiseOrValue<string>,
      signerAmount: PromiseOrValue<BigNumberish>,
      senderToken: PromiseOrValue<string>,
      senderAmount: PromiseOrValue<BigNumberish>,
      v: PromiseOrValue<BigNumberish>,
      r: PromiseOrValue<BytesLike>,
      s: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<[BigNumber, string[]]>;

    getChainId(overrides?: CallOverrides): Promise<BigNumber>;

    nonceUsed(
      signer: PromiseOrValue<string>,
      nonce: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<boolean>;

    owner(overrides?: CallOverrides): Promise<string>;

    protocolFee(overrides?: CallOverrides): Promise<BigNumber>;

    protocolFeeLight(overrides?: CallOverrides): Promise<BigNumber>;

    protocolFeeWallet(overrides?: CallOverrides): Promise<string>;

    rebateMax(overrides?: CallOverrides): Promise<BigNumber>;

    rebateScale(overrides?: CallOverrides): Promise<BigNumber>;

    renounceOwnership(overrides?: CallOverrides): Promise<void>;

    revoke(overrides?: CallOverrides): Promise<void>;

    setProtocolFee(
      _protocolFee: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<void>;

    setProtocolFeeLight(
      _protocolFeeLight: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<void>;

    setProtocolFeeWallet(
      _protocolFeeWallet: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<void>;

    setRebateMax(
      _rebateMax: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<void>;

    setRebateScale(
      _rebateScale: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<void>;

    setStaking(
      newstaking: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<void>;

    staking(overrides?: CallOverrides): Promise<string>;

    swap(
      recipient: PromiseOrValue<string>,
      nonce: PromiseOrValue<BigNumberish>,
      expiry: PromiseOrValue<BigNumberish>,
      signerWallet: PromiseOrValue<string>,
      signerToken: PromiseOrValue<string>,
      signerAmount: PromiseOrValue<BigNumberish>,
      senderToken: PromiseOrValue<string>,
      senderAmount: PromiseOrValue<BigNumberish>,
      v: PromiseOrValue<BigNumberish>,
      r: PromiseOrValue<BytesLike>,
      s: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<void>;

    swapAnySender(
      recipient: PromiseOrValue<string>,
      nonce: PromiseOrValue<BigNumberish>,
      expiry: PromiseOrValue<BigNumberish>,
      signerWallet: PromiseOrValue<string>,
      signerToken: PromiseOrValue<string>,
      signerAmount: PromiseOrValue<BigNumberish>,
      senderToken: PromiseOrValue<string>,
      senderAmount: PromiseOrValue<BigNumberish>,
      v: PromiseOrValue<BigNumberish>,
      r: PromiseOrValue<BytesLike>,
      s: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<void>;

    swapLight(
      nonce: PromiseOrValue<BigNumberish>,
      expiry: PromiseOrValue<BigNumberish>,
      signerWallet: PromiseOrValue<string>,
      signerToken: PromiseOrValue<string>,
      signerAmount: PromiseOrValue<BigNumberish>,
      senderToken: PromiseOrValue<string>,
      senderAmount: PromiseOrValue<BigNumberish>,
      v: PromiseOrValue<BigNumberish>,
      r: PromiseOrValue<BytesLike>,
      s: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<void>;

    transferOwnership(
      newOwner: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<void>;
  };

  filters: {
    "Authorize(address,address)"(
      signer?: PromiseOrValue<string> | null,
      signerWallet?: PromiseOrValue<string> | null
    ): AuthorizeEventFilter;
    Authorize(
      signer?: PromiseOrValue<string> | null,
      signerWallet?: PromiseOrValue<string> | null
    ): AuthorizeEventFilter;

    "Cancel(uint256,address)"(
      nonce?: PromiseOrValue<BigNumberish> | null,
      signerWallet?: PromiseOrValue<string> | null
    ): CancelEventFilter;
    Cancel(
      nonce?: PromiseOrValue<BigNumberish> | null,
      signerWallet?: PromiseOrValue<string> | null
    ): CancelEventFilter;

    "OwnershipTransferred(address,address)"(
      previousOwner?: PromiseOrValue<string> | null,
      newOwner?: PromiseOrValue<string> | null
    ): OwnershipTransferredEventFilter;
    OwnershipTransferred(
      previousOwner?: PromiseOrValue<string> | null,
      newOwner?: PromiseOrValue<string> | null
    ): OwnershipTransferredEventFilter;

    "Revoke(address,address)"(
      signer?: PromiseOrValue<string> | null,
      signerWallet?: PromiseOrValue<string> | null
    ): RevokeEventFilter;
    Revoke(
      signer?: PromiseOrValue<string> | null,
      signerWallet?: PromiseOrValue<string> | null
    ): RevokeEventFilter;

    "SetProtocolFee(uint256)"(protocolFee?: null): SetProtocolFeeEventFilter;
    SetProtocolFee(protocolFee?: null): SetProtocolFeeEventFilter;

    "SetProtocolFeeLight(uint256)"(
      protocolFeeLight?: null
    ): SetProtocolFeeLightEventFilter;
    SetProtocolFeeLight(
      protocolFeeLight?: null
    ): SetProtocolFeeLightEventFilter;

    "SetProtocolFeeWallet(address)"(
      feeWallet?: PromiseOrValue<string> | null
    ): SetProtocolFeeWalletEventFilter;
    SetProtocolFeeWallet(
      feeWallet?: PromiseOrValue<string> | null
    ): SetProtocolFeeWalletEventFilter;

    "SetRebateMax(uint256)"(rebateMax?: null): SetRebateMaxEventFilter;
    SetRebateMax(rebateMax?: null): SetRebateMaxEventFilter;

    "SetRebateScale(uint256)"(rebateScale?: null): SetRebateScaleEventFilter;
    SetRebateScale(rebateScale?: null): SetRebateScaleEventFilter;

    "SetStaking(address)"(
      staking?: PromiseOrValue<string> | null
    ): SetStakingEventFilter;
    SetStaking(staking?: PromiseOrValue<string> | null): SetStakingEventFilter;

    "Swap(uint256,uint256,address,address,uint256,uint256,address,address,uint256)"(
      nonce?: PromiseOrValue<BigNumberish> | null,
      timestamp?: null,
      signerWallet?: PromiseOrValue<string> | null,
      signerToken?: null,
      signerAmount?: null,
      protocolFee?: null,
      senderWallet?: PromiseOrValue<string> | null,
      senderToken?: null,
      senderAmount?: null
    ): SwapEventFilter;
    Swap(
      nonce?: PromiseOrValue<BigNumberish> | null,
      timestamp?: null,
      signerWallet?: PromiseOrValue<string> | null,
      signerToken?: null,
      signerAmount?: null,
      protocolFee?: null,
      senderWallet?: PromiseOrValue<string> | null,
      senderToken?: null,
      senderAmount?: null
    ): SwapEventFilter;
  };

  estimateGas: {
    DOMAIN_CHAIN_ID(overrides?: CallOverrides): Promise<BigNumber>;

    DOMAIN_NAME(overrides?: CallOverrides): Promise<BigNumber>;

    DOMAIN_SEPARATOR(overrides?: CallOverrides): Promise<BigNumber>;

    DOMAIN_TYPEHASH(overrides?: CallOverrides): Promise<BigNumber>;

    DOMAIN_VERSION(overrides?: CallOverrides): Promise<BigNumber>;

    FEE_DIVISOR(overrides?: CallOverrides): Promise<BigNumber>;

    ORDER_TYPEHASH(overrides?: CallOverrides): Promise<BigNumber>;

    authorize(
      signer: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    authorized(
      arg0: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    calculateDiscount(
      stakingBalance: PromiseOrValue<BigNumberish>,
      feeAmount: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    calculateProtocolFee(
      wallet: PromiseOrValue<string>,
      amount: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    cancel(
      nonces: PromiseOrValue<BigNumberish>[],
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    check(
      senderWallet: PromiseOrValue<string>,
      nonce: PromiseOrValue<BigNumberish>,
      expiry: PromiseOrValue<BigNumberish>,
      signerWallet: PromiseOrValue<string>,
      signerToken: PromiseOrValue<string>,
      signerAmount: PromiseOrValue<BigNumberish>,
      senderToken: PromiseOrValue<string>,
      senderAmount: PromiseOrValue<BigNumberish>,
      v: PromiseOrValue<BigNumberish>,
      r: PromiseOrValue<BytesLike>,
      s: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getChainId(overrides?: CallOverrides): Promise<BigNumber>;

    nonceUsed(
      signer: PromiseOrValue<string>,
      nonce: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    owner(overrides?: CallOverrides): Promise<BigNumber>;

    protocolFee(overrides?: CallOverrides): Promise<BigNumber>;

    protocolFeeLight(overrides?: CallOverrides): Promise<BigNumber>;

    protocolFeeWallet(overrides?: CallOverrides): Promise<BigNumber>;

    rebateMax(overrides?: CallOverrides): Promise<BigNumber>;

    rebateScale(overrides?: CallOverrides): Promise<BigNumber>;

    renounceOwnership(
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    revoke(
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    setProtocolFee(
      _protocolFee: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    setProtocolFeeLight(
      _protocolFeeLight: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    setProtocolFeeWallet(
      _protocolFeeWallet: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    setRebateMax(
      _rebateMax: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    setRebateScale(
      _rebateScale: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    setStaking(
      newstaking: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    staking(overrides?: CallOverrides): Promise<BigNumber>;

    swap(
      recipient: PromiseOrValue<string>,
      nonce: PromiseOrValue<BigNumberish>,
      expiry: PromiseOrValue<BigNumberish>,
      signerWallet: PromiseOrValue<string>,
      signerToken: PromiseOrValue<string>,
      signerAmount: PromiseOrValue<BigNumberish>,
      senderToken: PromiseOrValue<string>,
      senderAmount: PromiseOrValue<BigNumberish>,
      v: PromiseOrValue<BigNumberish>,
      r: PromiseOrValue<BytesLike>,
      s: PromiseOrValue<BytesLike>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    swapAnySender(
      recipient: PromiseOrValue<string>,
      nonce: PromiseOrValue<BigNumberish>,
      expiry: PromiseOrValue<BigNumberish>,
      signerWallet: PromiseOrValue<string>,
      signerToken: PromiseOrValue<string>,
      signerAmount: PromiseOrValue<BigNumberish>,
      senderToken: PromiseOrValue<string>,
      senderAmount: PromiseOrValue<BigNumberish>,
      v: PromiseOrValue<BigNumberish>,
      r: PromiseOrValue<BytesLike>,
      s: PromiseOrValue<BytesLike>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    swapLight(
      nonce: PromiseOrValue<BigNumberish>,
      expiry: PromiseOrValue<BigNumberish>,
      signerWallet: PromiseOrValue<string>,
      signerToken: PromiseOrValue<string>,
      signerAmount: PromiseOrValue<BigNumberish>,
      senderToken: PromiseOrValue<string>,
      senderAmount: PromiseOrValue<BigNumberish>,
      v: PromiseOrValue<BigNumberish>,
      r: PromiseOrValue<BytesLike>,
      s: PromiseOrValue<BytesLike>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    transferOwnership(
      newOwner: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;
  };

  populateTransaction: {
    DOMAIN_CHAIN_ID(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    DOMAIN_NAME(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    DOMAIN_SEPARATOR(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    DOMAIN_TYPEHASH(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    DOMAIN_VERSION(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    FEE_DIVISOR(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    ORDER_TYPEHASH(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    authorize(
      signer: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    authorized(
      arg0: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    calculateDiscount(
      stakingBalance: PromiseOrValue<BigNumberish>,
      feeAmount: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    calculateProtocolFee(
      wallet: PromiseOrValue<string>,
      amount: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    cancel(
      nonces: PromiseOrValue<BigNumberish>[],
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    check(
      senderWallet: PromiseOrValue<string>,
      nonce: PromiseOrValue<BigNumberish>,
      expiry: PromiseOrValue<BigNumberish>,
      signerWallet: PromiseOrValue<string>,
      signerToken: PromiseOrValue<string>,
      signerAmount: PromiseOrValue<BigNumberish>,
      senderToken: PromiseOrValue<string>,
      senderAmount: PromiseOrValue<BigNumberish>,
      v: PromiseOrValue<BigNumberish>,
      r: PromiseOrValue<BytesLike>,
      s: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getChainId(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    nonceUsed(
      signer: PromiseOrValue<string>,
      nonce: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    owner(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    protocolFee(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    protocolFeeLight(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    protocolFeeWallet(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    rebateMax(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    rebateScale(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    renounceOwnership(
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    revoke(
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    setProtocolFee(
      _protocolFee: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    setProtocolFeeLight(
      _protocolFeeLight: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    setProtocolFeeWallet(
      _protocolFeeWallet: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    setRebateMax(
      _rebateMax: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    setRebateScale(
      _rebateScale: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    setStaking(
      newstaking: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    staking(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    swap(
      recipient: PromiseOrValue<string>,
      nonce: PromiseOrValue<BigNumberish>,
      expiry: PromiseOrValue<BigNumberish>,
      signerWallet: PromiseOrValue<string>,
      signerToken: PromiseOrValue<string>,
      signerAmount: PromiseOrValue<BigNumberish>,
      senderToken: PromiseOrValue<string>,
      senderAmount: PromiseOrValue<BigNumberish>,
      v: PromiseOrValue<BigNumberish>,
      r: PromiseOrValue<BytesLike>,
      s: PromiseOrValue<BytesLike>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    swapAnySender(
      recipient: PromiseOrValue<string>,
      nonce: PromiseOrValue<BigNumberish>,
      expiry: PromiseOrValue<BigNumberish>,
      signerWallet: PromiseOrValue<string>,
      signerToken: PromiseOrValue<string>,
      signerAmount: PromiseOrValue<BigNumberish>,
      senderToken: PromiseOrValue<string>,
      senderAmount: PromiseOrValue<BigNumberish>,
      v: PromiseOrValue<BigNumberish>,
      r: PromiseOrValue<BytesLike>,
      s: PromiseOrValue<BytesLike>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    swapLight(
      nonce: PromiseOrValue<BigNumberish>,
      expiry: PromiseOrValue<BigNumberish>,
      signerWallet: PromiseOrValue<string>,
      signerToken: PromiseOrValue<string>,
      signerAmount: PromiseOrValue<BigNumberish>,
      senderToken: PromiseOrValue<string>,
      senderAmount: PromiseOrValue<BigNumberish>,
      v: PromiseOrValue<BigNumberish>,
      r: PromiseOrValue<BytesLike>,
      s: PromiseOrValue<BytesLike>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    transferOwnership(
      newOwner: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;
  };
}
