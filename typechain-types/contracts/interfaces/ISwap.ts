/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import type {
  BaseContract,
  BigNumber,
  BigNumberish,
  BytesLike,
  CallOverrides,
  ContractTransaction,
  Overrides,
  PopulatedTransaction,
  Signer,
  utils,
} from "ethers";
import type {
  FunctionFragment,
  Result,
  EventFragment,
} from "@ethersproject/abi";
import type { Listener, Provider } from "@ethersproject/providers";
import type {
  TypedEventFilter,
  TypedEvent,
  TypedListener,
  OnEvent,
  PromiseOrValue,
} from "../../common";

export interface ISwapInterface extends utils.Interface {
  functions: {
    "authorize(address)": FunctionFragment;
    "authorized(address)": FunctionFragment;
    "calculateProtocolFee(address,uint256)": FunctionFragment;
    "cancel(uint256[])": FunctionFragment;
    "nonceUsed(address,uint256)": FunctionFragment;
    "revoke()": FunctionFragment;
    "swap(address,uint256,uint256,address,address,uint256,address,uint256,uint8,bytes32,bytes32)": FunctionFragment;
    "swapAnySender(address,uint256,uint256,address,address,uint256,address,uint256,uint8,bytes32,bytes32)": FunctionFragment;
    "swapLight(uint256,uint256,address,address,uint256,address,uint256,uint8,bytes32,bytes32)": FunctionFragment;
  };

  getFunction(
    nameOrSignatureOrTopic:
      | "authorize"
      | "authorized"
      | "calculateProtocolFee"
      | "cancel"
      | "nonceUsed"
      | "revoke"
      | "swap"
      | "swapAnySender"
      | "swapLight"
  ): FunctionFragment;

  encodeFunctionData(
    functionFragment: "authorize",
    values: [PromiseOrValue<string>]
  ): string;
  encodeFunctionData(
    functionFragment: "authorized",
    values: [PromiseOrValue<string>]
  ): string;
  encodeFunctionData(
    functionFragment: "calculateProtocolFee",
    values: [PromiseOrValue<string>, PromiseOrValue<BigNumberish>]
  ): string;
  encodeFunctionData(
    functionFragment: "cancel",
    values: [PromiseOrValue<BigNumberish>[]]
  ): string;
  encodeFunctionData(
    functionFragment: "nonceUsed",
    values: [PromiseOrValue<string>, PromiseOrValue<BigNumberish>]
  ): string;
  encodeFunctionData(functionFragment: "revoke", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "swap",
    values: [
      PromiseOrValue<string>,
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<string>,
      PromiseOrValue<string>,
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<string>,
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<BytesLike>,
      PromiseOrValue<BytesLike>
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "swapAnySender",
    values: [
      PromiseOrValue<string>,
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<string>,
      PromiseOrValue<string>,
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<string>,
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<BytesLike>,
      PromiseOrValue<BytesLike>
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "swapLight",
    values: [
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<string>,
      PromiseOrValue<string>,
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<string>,
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<BytesLike>,
      PromiseOrValue<BytesLike>
    ]
  ): string;

  decodeFunctionResult(functionFragment: "authorize", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "authorized", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "calculateProtocolFee",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "cancel", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "nonceUsed", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "revoke", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "swap", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "swapAnySender",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "swapLight", data: BytesLike): Result;

  events: {
    "Authorize(address,address)": EventFragment;
    "Cancel(uint256,address)": EventFragment;
    "Revoke(address,address)": EventFragment;
    "SetProtocolFee(uint256)": EventFragment;
    "SetProtocolFeeLight(uint256)": EventFragment;
    "SetProtocolFeeWallet(address)": EventFragment;
    "SetRebateMax(uint256)": EventFragment;
    "SetRebateScale(uint256)": EventFragment;
    "SetStaking(address)": EventFragment;
    "Swap(uint256,uint256,address,address,uint256,uint256,address,address,uint256)": EventFragment;
  };

  getEvent(nameOrSignatureOrTopic: "Authorize"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "Cancel"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "Revoke"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "SetProtocolFee"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "SetProtocolFeeLight"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "SetProtocolFeeWallet"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "SetRebateMax"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "SetRebateScale"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "SetStaking"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "Swap"): EventFragment;
}

export interface AuthorizeEventObject {
  signer: string;
  signerWallet: string;
}
export type AuthorizeEvent = TypedEvent<[string, string], AuthorizeEventObject>;

export type AuthorizeEventFilter = TypedEventFilter<AuthorizeEvent>;

export interface CancelEventObject {
  nonce: BigNumber;
  signerWallet: string;
}
export type CancelEvent = TypedEvent<[BigNumber, string], CancelEventObject>;

export type CancelEventFilter = TypedEventFilter<CancelEvent>;

export interface RevokeEventObject {
  signer: string;
  signerWallet: string;
}
export type RevokeEvent = TypedEvent<[string, string], RevokeEventObject>;

export type RevokeEventFilter = TypedEventFilter<RevokeEvent>;

export interface SetProtocolFeeEventObject {
  protocolFee: BigNumber;
}
export type SetProtocolFeeEvent = TypedEvent<
  [BigNumber],
  SetProtocolFeeEventObject
>;

export type SetProtocolFeeEventFilter = TypedEventFilter<SetProtocolFeeEvent>;

export interface SetProtocolFeeLightEventObject {
  protocolFeeLight: BigNumber;
}
export type SetProtocolFeeLightEvent = TypedEvent<
  [BigNumber],
  SetProtocolFeeLightEventObject
>;

export type SetProtocolFeeLightEventFilter =
  TypedEventFilter<SetProtocolFeeLightEvent>;

export interface SetProtocolFeeWalletEventObject {
  feeWallet: string;
}
export type SetProtocolFeeWalletEvent = TypedEvent<
  [string],
  SetProtocolFeeWalletEventObject
>;

export type SetProtocolFeeWalletEventFilter =
  TypedEventFilter<SetProtocolFeeWalletEvent>;

export interface SetRebateMaxEventObject {
  rebateMax: BigNumber;
}
export type SetRebateMaxEvent = TypedEvent<
  [BigNumber],
  SetRebateMaxEventObject
>;

export type SetRebateMaxEventFilter = TypedEventFilter<SetRebateMaxEvent>;

export interface SetRebateScaleEventObject {
  rebateScale: BigNumber;
}
export type SetRebateScaleEvent = TypedEvent<
  [BigNumber],
  SetRebateScaleEventObject
>;

export type SetRebateScaleEventFilter = TypedEventFilter<SetRebateScaleEvent>;

export interface SetStakingEventObject {
  staking: string;
}
export type SetStakingEvent = TypedEvent<[string], SetStakingEventObject>;

export type SetStakingEventFilter = TypedEventFilter<SetStakingEvent>;

export interface SwapEventObject {
  nonce: BigNumber;
  timestamp: BigNumber;
  signerWallet: string;
  signerToken: string;
  signerAmount: BigNumber;
  protocolFee: BigNumber;
  senderWallet: string;
  senderToken: string;
  senderAmount: BigNumber;
}
export type SwapEvent = TypedEvent<
  [
    BigNumber,
    BigNumber,
    string,
    string,
    BigNumber,
    BigNumber,
    string,
    string,
    BigNumber
  ],
  SwapEventObject
>;

export type SwapEventFilter = TypedEventFilter<SwapEvent>;

export interface ISwap extends BaseContract {
  connect(signerOrProvider: Signer | Provider | string): this;
  attach(addressOrName: string): this;
  deployed(): Promise<this>;

  interface: ISwapInterface;

  queryFilter<TEvent extends TypedEvent>(
    event: TypedEventFilter<TEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TEvent>>;

  listeners<TEvent extends TypedEvent>(
    eventFilter?: TypedEventFilter<TEvent>
  ): Array<TypedListener<TEvent>>;
  listeners(eventName?: string): Array<Listener>;
  removeAllListeners<TEvent extends TypedEvent>(
    eventFilter: TypedEventFilter<TEvent>
  ): this;
  removeAllListeners(eventName?: string): this;
  off: OnEvent<this>;
  on: OnEvent<this>;
  once: OnEvent<this>;
  removeListener: OnEvent<this>;

  functions: {
    authorize(
      sender: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    authorized(
      arg0: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<[string]>;

    calculateProtocolFee(
      arg0: PromiseOrValue<string>,
      arg1: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    cancel(
      nonces: PromiseOrValue<BigNumberish>[],
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    nonceUsed(
      arg0: PromiseOrValue<string>,
      arg1: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<[boolean]>;

    revoke(
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    swap(
      recipient: PromiseOrValue<string>,
      nonce: PromiseOrValue<BigNumberish>,
      expiry: PromiseOrValue<BigNumberish>,
      signerWallet: PromiseOrValue<string>,
      signerToken: PromiseOrValue<string>,
      signerAmount: PromiseOrValue<BigNumberish>,
      senderToken: PromiseOrValue<string>,
      senderAmount: PromiseOrValue<BigNumberish>,
      v: PromiseOrValue<BigNumberish>,
      r: PromiseOrValue<BytesLike>,
      s: PromiseOrValue<BytesLike>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    swapAnySender(
      recipient: PromiseOrValue<string>,
      nonce: PromiseOrValue<BigNumberish>,
      expiry: PromiseOrValue<BigNumberish>,
      signerWallet: PromiseOrValue<string>,
      signerToken: PromiseOrValue<string>,
      signerAmount: PromiseOrValue<BigNumberish>,
      senderToken: PromiseOrValue<string>,
      senderAmount: PromiseOrValue<BigNumberish>,
      v: PromiseOrValue<BigNumberish>,
      r: PromiseOrValue<BytesLike>,
      s: PromiseOrValue<BytesLike>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    swapLight(
      nonce: PromiseOrValue<BigNumberish>,
      expiry: PromiseOrValue<BigNumberish>,
      signerWallet: PromiseOrValue<string>,
      signerToken: PromiseOrValue<string>,
      signerAmount: PromiseOrValue<BigNumberish>,
      senderToken: PromiseOrValue<string>,
      senderAmount: PromiseOrValue<BigNumberish>,
      v: PromiseOrValue<BigNumberish>,
      r: PromiseOrValue<BytesLike>,
      s: PromiseOrValue<BytesLike>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;
  };

  authorize(
    sender: PromiseOrValue<string>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  authorized(
    arg0: PromiseOrValue<string>,
    overrides?: CallOverrides
  ): Promise<string>;

  calculateProtocolFee(
    arg0: PromiseOrValue<string>,
    arg1: PromiseOrValue<BigNumberish>,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  cancel(
    nonces: PromiseOrValue<BigNumberish>[],
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  nonceUsed(
    arg0: PromiseOrValue<string>,
    arg1: PromiseOrValue<BigNumberish>,
    overrides?: CallOverrides
  ): Promise<boolean>;

  revoke(
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  swap(
    recipient: PromiseOrValue<string>,
    nonce: PromiseOrValue<BigNumberish>,
    expiry: PromiseOrValue<BigNumberish>,
    signerWallet: PromiseOrValue<string>,
    signerToken: PromiseOrValue<string>,
    signerAmount: PromiseOrValue<BigNumberish>,
    senderToken: PromiseOrValue<string>,
    senderAmount: PromiseOrValue<BigNumberish>,
    v: PromiseOrValue<BigNumberish>,
    r: PromiseOrValue<BytesLike>,
    s: PromiseOrValue<BytesLike>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  swapAnySender(
    recipient: PromiseOrValue<string>,
    nonce: PromiseOrValue<BigNumberish>,
    expiry: PromiseOrValue<BigNumberish>,
    signerWallet: PromiseOrValue<string>,
    signerToken: PromiseOrValue<string>,
    signerAmount: PromiseOrValue<BigNumberish>,
    senderToken: PromiseOrValue<string>,
    senderAmount: PromiseOrValue<BigNumberish>,
    v: PromiseOrValue<BigNumberish>,
    r: PromiseOrValue<BytesLike>,
    s: PromiseOrValue<BytesLike>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  swapLight(
    nonce: PromiseOrValue<BigNumberish>,
    expiry: PromiseOrValue<BigNumberish>,
    signerWallet: PromiseOrValue<string>,
    signerToken: PromiseOrValue<string>,
    signerAmount: PromiseOrValue<BigNumberish>,
    senderToken: PromiseOrValue<string>,
    senderAmount: PromiseOrValue<BigNumberish>,
    v: PromiseOrValue<BigNumberish>,
    r: PromiseOrValue<BytesLike>,
    s: PromiseOrValue<BytesLike>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  callStatic: {
    authorize(
      sender: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<void>;

    authorized(
      arg0: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<string>;

    calculateProtocolFee(
      arg0: PromiseOrValue<string>,
      arg1: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    cancel(
      nonces: PromiseOrValue<BigNumberish>[],
      overrides?: CallOverrides
    ): Promise<void>;

    nonceUsed(
      arg0: PromiseOrValue<string>,
      arg1: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<boolean>;

    revoke(overrides?: CallOverrides): Promise<void>;

    swap(
      recipient: PromiseOrValue<string>,
      nonce: PromiseOrValue<BigNumberish>,
      expiry: PromiseOrValue<BigNumberish>,
      signerWallet: PromiseOrValue<string>,
      signerToken: PromiseOrValue<string>,
      signerAmount: PromiseOrValue<BigNumberish>,
      senderToken: PromiseOrValue<string>,
      senderAmount: PromiseOrValue<BigNumberish>,
      v: PromiseOrValue<BigNumberish>,
      r: PromiseOrValue<BytesLike>,
      s: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<void>;

    swapAnySender(
      recipient: PromiseOrValue<string>,
      nonce: PromiseOrValue<BigNumberish>,
      expiry: PromiseOrValue<BigNumberish>,
      signerWallet: PromiseOrValue<string>,
      signerToken: PromiseOrValue<string>,
      signerAmount: PromiseOrValue<BigNumberish>,
      senderToken: PromiseOrValue<string>,
      senderAmount: PromiseOrValue<BigNumberish>,
      v: PromiseOrValue<BigNumberish>,
      r: PromiseOrValue<BytesLike>,
      s: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<void>;

    swapLight(
      nonce: PromiseOrValue<BigNumberish>,
      expiry: PromiseOrValue<BigNumberish>,
      signerWallet: PromiseOrValue<string>,
      signerToken: PromiseOrValue<string>,
      signerAmount: PromiseOrValue<BigNumberish>,
      senderToken: PromiseOrValue<string>,
      senderAmount: PromiseOrValue<BigNumberish>,
      v: PromiseOrValue<BigNumberish>,
      r: PromiseOrValue<BytesLike>,
      s: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<void>;
  };

  filters: {
    "Authorize(address,address)"(
      signer?: PromiseOrValue<string> | null,
      signerWallet?: PromiseOrValue<string> | null
    ): AuthorizeEventFilter;
    Authorize(
      signer?: PromiseOrValue<string> | null,
      signerWallet?: PromiseOrValue<string> | null
    ): AuthorizeEventFilter;

    "Cancel(uint256,address)"(
      nonce?: PromiseOrValue<BigNumberish> | null,
      signerWallet?: PromiseOrValue<string> | null
    ): CancelEventFilter;
    Cancel(
      nonce?: PromiseOrValue<BigNumberish> | null,
      signerWallet?: PromiseOrValue<string> | null
    ): CancelEventFilter;

    "Revoke(address,address)"(
      signer?: PromiseOrValue<string> | null,
      signerWallet?: PromiseOrValue<string> | null
    ): RevokeEventFilter;
    Revoke(
      signer?: PromiseOrValue<string> | null,
      signerWallet?: PromiseOrValue<string> | null
    ): RevokeEventFilter;

    "SetProtocolFee(uint256)"(protocolFee?: null): SetProtocolFeeEventFilter;
    SetProtocolFee(protocolFee?: null): SetProtocolFeeEventFilter;

    "SetProtocolFeeLight(uint256)"(
      protocolFeeLight?: null
    ): SetProtocolFeeLightEventFilter;
    SetProtocolFeeLight(
      protocolFeeLight?: null
    ): SetProtocolFeeLightEventFilter;

    "SetProtocolFeeWallet(address)"(
      feeWallet?: PromiseOrValue<string> | null
    ): SetProtocolFeeWalletEventFilter;
    SetProtocolFeeWallet(
      feeWallet?: PromiseOrValue<string> | null
    ): SetProtocolFeeWalletEventFilter;

    "SetRebateMax(uint256)"(rebateMax?: null): SetRebateMaxEventFilter;
    SetRebateMax(rebateMax?: null): SetRebateMaxEventFilter;

    "SetRebateScale(uint256)"(rebateScale?: null): SetRebateScaleEventFilter;
    SetRebateScale(rebateScale?: null): SetRebateScaleEventFilter;

    "SetStaking(address)"(
      staking?: PromiseOrValue<string> | null
    ): SetStakingEventFilter;
    SetStaking(staking?: PromiseOrValue<string> | null): SetStakingEventFilter;

    "Swap(uint256,uint256,address,address,uint256,uint256,address,address,uint256)"(
      nonce?: PromiseOrValue<BigNumberish> | null,
      timestamp?: null,
      signerWallet?: PromiseOrValue<string> | null,
      signerToken?: null,
      signerAmount?: null,
      protocolFee?: null,
      senderWallet?: PromiseOrValue<string> | null,
      senderToken?: null,
      senderAmount?: null
    ): SwapEventFilter;
    Swap(
      nonce?: PromiseOrValue<BigNumberish> | null,
      timestamp?: null,
      signerWallet?: PromiseOrValue<string> | null,
      signerToken?: null,
      signerAmount?: null,
      protocolFee?: null,
      senderWallet?: PromiseOrValue<string> | null,
      senderToken?: null,
      senderAmount?: null
    ): SwapEventFilter;
  };

  estimateGas: {
    authorize(
      sender: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    authorized(
      arg0: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    calculateProtocolFee(
      arg0: PromiseOrValue<string>,
      arg1: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    cancel(
      nonces: PromiseOrValue<BigNumberish>[],
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    nonceUsed(
      arg0: PromiseOrValue<string>,
      arg1: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    revoke(
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    swap(
      recipient: PromiseOrValue<string>,
      nonce: PromiseOrValue<BigNumberish>,
      expiry: PromiseOrValue<BigNumberish>,
      signerWallet: PromiseOrValue<string>,
      signerToken: PromiseOrValue<string>,
      signerAmount: PromiseOrValue<BigNumberish>,
      senderToken: PromiseOrValue<string>,
      senderAmount: PromiseOrValue<BigNumberish>,
      v: PromiseOrValue<BigNumberish>,
      r: PromiseOrValue<BytesLike>,
      s: PromiseOrValue<BytesLike>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    swapAnySender(
      recipient: PromiseOrValue<string>,
      nonce: PromiseOrValue<BigNumberish>,
      expiry: PromiseOrValue<BigNumberish>,
      signerWallet: PromiseOrValue<string>,
      signerToken: PromiseOrValue<string>,
      signerAmount: PromiseOrValue<BigNumberish>,
      senderToken: PromiseOrValue<string>,
      senderAmount: PromiseOrValue<BigNumberish>,
      v: PromiseOrValue<BigNumberish>,
      r: PromiseOrValue<BytesLike>,
      s: PromiseOrValue<BytesLike>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    swapLight(
      nonce: PromiseOrValue<BigNumberish>,
      expiry: PromiseOrValue<BigNumberish>,
      signerWallet: PromiseOrValue<string>,
      signerToken: PromiseOrValue<string>,
      signerAmount: PromiseOrValue<BigNumberish>,
      senderToken: PromiseOrValue<string>,
      senderAmount: PromiseOrValue<BigNumberish>,
      v: PromiseOrValue<BigNumberish>,
      r: PromiseOrValue<BytesLike>,
      s: PromiseOrValue<BytesLike>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;
  };

  populateTransaction: {
    authorize(
      sender: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    authorized(
      arg0: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    calculateProtocolFee(
      arg0: PromiseOrValue<string>,
      arg1: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    cancel(
      nonces: PromiseOrValue<BigNumberish>[],
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    nonceUsed(
      arg0: PromiseOrValue<string>,
      arg1: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    revoke(
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    swap(
      recipient: PromiseOrValue<string>,
      nonce: PromiseOrValue<BigNumberish>,
      expiry: PromiseOrValue<BigNumberish>,
      signerWallet: PromiseOrValue<string>,
      signerToken: PromiseOrValue<string>,
      signerAmount: PromiseOrValue<BigNumberish>,
      senderToken: PromiseOrValue<string>,
      senderAmount: PromiseOrValue<BigNumberish>,
      v: PromiseOrValue<BigNumberish>,
      r: PromiseOrValue<BytesLike>,
      s: PromiseOrValue<BytesLike>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    swapAnySender(
      recipient: PromiseOrValue<string>,
      nonce: PromiseOrValue<BigNumberish>,
      expiry: PromiseOrValue<BigNumberish>,
      signerWallet: PromiseOrValue<string>,
      signerToken: PromiseOrValue<string>,
      signerAmount: PromiseOrValue<BigNumberish>,
      senderToken: PromiseOrValue<string>,
      senderAmount: PromiseOrValue<BigNumberish>,
      v: PromiseOrValue<BigNumberish>,
      r: PromiseOrValue<BytesLike>,
      s: PromiseOrValue<BytesLike>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    swapLight(
      nonce: PromiseOrValue<BigNumberish>,
      expiry: PromiseOrValue<BigNumberish>,
      signerWallet: PromiseOrValue<string>,
      signerToken: PromiseOrValue<string>,
      signerAmount: PromiseOrValue<BigNumberish>,
      senderToken: PromiseOrValue<string>,
      senderAmount: PromiseOrValue<BigNumberish>,
      v: PromiseOrValue<BigNumberish>,
      r: PromiseOrValue<BytesLike>,
      s: PromiseOrValue<BytesLike>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;
  };
}
