/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import type {
  BaseContract,
  BigNumber,
  BigNumberish,
  BytesLike,
  CallOverrides,
  ContractTransaction,
  Overrides,
  PopulatedTransaction,
  Signer,
  utils,
} from "ethers";
import type {
  FunctionFragment,
  Result,
  EventFragment,
} from "@ethersproject/abi";
import type { Listener, Provider } from "@ethersproject/providers";
import type {
  TypedEventFilter,
  TypedEvent,
  TypedListener,
  OnEvent,
  PromiseOrValue,
} from "../../common";

export declare namespace IStaking {
  export type StakeStruct = {
    duration: PromiseOrValue<BigNumberish>;
    balance: PromiseOrValue<BigNumberish>;
    timestamp: PromiseOrValue<BigNumberish>;
  };

  export type StakeStructOutput = [BigNumber, BigNumber, BigNumber] & {
    duration: BigNumber;
    balance: BigNumber;
    timestamp: BigNumber;
  };
}

export interface IStakingInterface extends utils.Interface {
  functions: {
    "available(address)": FunctionFragment;
    "balanceOf(address)": FunctionFragment;
    "decimals()": FunctionFragment;
    "getStakes(address)": FunctionFragment;
    "stake(uint256)": FunctionFragment;
    "stakeFor(address,uint256)": FunctionFragment;
    "totalSupply()": FunctionFragment;
    "unstake(uint256)": FunctionFragment;
  };

  getFunction(
    nameOrSignatureOrTopic:
      | "available"
      | "balanceOf"
      | "decimals"
      | "getStakes"
      | "stake"
      | "stakeFor"
      | "totalSupply"
      | "unstake"
  ): FunctionFragment;

  encodeFunctionData(
    functionFragment: "available",
    values: [PromiseOrValue<string>]
  ): string;
  encodeFunctionData(
    functionFragment: "balanceOf",
    values: [PromiseOrValue<string>]
  ): string;
  encodeFunctionData(functionFragment: "decimals", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "getStakes",
    values: [PromiseOrValue<string>]
  ): string;
  encodeFunctionData(
    functionFragment: "stake",
    values: [PromiseOrValue<BigNumberish>]
  ): string;
  encodeFunctionData(
    functionFragment: "stakeFor",
    values: [PromiseOrValue<string>, PromiseOrValue<BigNumberish>]
  ): string;
  encodeFunctionData(
    functionFragment: "totalSupply",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "unstake",
    values: [PromiseOrValue<BigNumberish>]
  ): string;

  decodeFunctionResult(functionFragment: "available", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "balanceOf", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "decimals", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "getStakes", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "stake", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "stakeFor", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "totalSupply",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "unstake", data: BytesLike): Result;

  events: {
    "CancelDurationChange()": EventFragment;
    "CompleteDurationChange(uint256)": EventFragment;
    "ProposeDelegate(address,address)": EventFragment;
    "ScheduleDurationChange(uint256)": EventFragment;
    "SetDelegate(address,address)": EventFragment;
    "Transfer(address,address,uint256)": EventFragment;
  };

  getEvent(nameOrSignatureOrTopic: "CancelDurationChange"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "CompleteDurationChange"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "ProposeDelegate"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "ScheduleDurationChange"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "SetDelegate"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "Transfer"): EventFragment;
}

export interface CancelDurationChangeEventObject {}
export type CancelDurationChangeEvent = TypedEvent<
  [],
  CancelDurationChangeEventObject
>;

export type CancelDurationChangeEventFilter =
  TypedEventFilter<CancelDurationChangeEvent>;

export interface CompleteDurationChangeEventObject {
  newDuration: BigNumber;
}
export type CompleteDurationChangeEvent = TypedEvent<
  [BigNumber],
  CompleteDurationChangeEventObject
>;

export type CompleteDurationChangeEventFilter =
  TypedEventFilter<CompleteDurationChangeEvent>;

export interface ProposeDelegateEventObject {
  delegate: string;
  account: string;
}
export type ProposeDelegateEvent = TypedEvent<
  [string, string],
  ProposeDelegateEventObject
>;

export type ProposeDelegateEventFilter = TypedEventFilter<ProposeDelegateEvent>;

export interface ScheduleDurationChangeEventObject {
  unlockTimestamp: BigNumber;
}
export type ScheduleDurationChangeEvent = TypedEvent<
  [BigNumber],
  ScheduleDurationChangeEventObject
>;

export type ScheduleDurationChangeEventFilter =
  TypedEventFilter<ScheduleDurationChangeEvent>;

export interface SetDelegateEventObject {
  delegate: string;
  account: string;
}
export type SetDelegateEvent = TypedEvent<
  [string, string],
  SetDelegateEventObject
>;

export type SetDelegateEventFilter = TypedEventFilter<SetDelegateEvent>;

export interface TransferEventObject {
  from: string;
  to: string;
  tokens: BigNumber;
}
export type TransferEvent = TypedEvent<
  [string, string, BigNumber],
  TransferEventObject
>;

export type TransferEventFilter = TypedEventFilter<TransferEvent>;

export interface IStaking extends BaseContract {
  connect(signerOrProvider: Signer | Provider | string): this;
  attach(addressOrName: string): this;
  deployed(): Promise<this>;

  interface: IStakingInterface;

  queryFilter<TEvent extends TypedEvent>(
    event: TypedEventFilter<TEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TEvent>>;

  listeners<TEvent extends TypedEvent>(
    eventFilter?: TypedEventFilter<TEvent>
  ): Array<TypedListener<TEvent>>;
  listeners(eventName?: string): Array<Listener>;
  removeAllListeners<TEvent extends TypedEvent>(
    eventFilter: TypedEventFilter<TEvent>
  ): this;
  removeAllListeners(eventName?: string): this;
  off: OnEvent<this>;
  on: OnEvent<this>;
  once: OnEvent<this>;
  removeListener: OnEvent<this>;

  functions: {
    available(
      account: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    balanceOf(
      account: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    decimals(overrides?: CallOverrides): Promise<[number]>;

    getStakes(
      account: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<
      [IStaking.StakeStructOutput] & {
        accountStake: IStaking.StakeStructOutput;
      }
    >;

    stake(
      amount: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    stakeFor(
      account: PromiseOrValue<string>,
      amount: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    totalSupply(overrides?: CallOverrides): Promise<[BigNumber]>;

    unstake(
      amount: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;
  };

  available(
    account: PromiseOrValue<string>,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  balanceOf(
    account: PromiseOrValue<string>,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  decimals(overrides?: CallOverrides): Promise<number>;

  getStakes(
    account: PromiseOrValue<string>,
    overrides?: CallOverrides
  ): Promise<IStaking.StakeStructOutput>;

  stake(
    amount: PromiseOrValue<BigNumberish>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  stakeFor(
    account: PromiseOrValue<string>,
    amount: PromiseOrValue<BigNumberish>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  totalSupply(overrides?: CallOverrides): Promise<BigNumber>;

  unstake(
    amount: PromiseOrValue<BigNumberish>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  callStatic: {
    available(
      account: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    balanceOf(
      account: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    decimals(overrides?: CallOverrides): Promise<number>;

    getStakes(
      account: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<IStaking.StakeStructOutput>;

    stake(
      amount: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<void>;

    stakeFor(
      account: PromiseOrValue<string>,
      amount: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<void>;

    totalSupply(overrides?: CallOverrides): Promise<BigNumber>;

    unstake(
      amount: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<void>;
  };

  filters: {
    "CancelDurationChange()"(): CancelDurationChangeEventFilter;
    CancelDurationChange(): CancelDurationChangeEventFilter;

    "CompleteDurationChange(uint256)"(
      newDuration?: PromiseOrValue<BigNumberish> | null
    ): CompleteDurationChangeEventFilter;
    CompleteDurationChange(
      newDuration?: PromiseOrValue<BigNumberish> | null
    ): CompleteDurationChangeEventFilter;

    "ProposeDelegate(address,address)"(
      delegate?: PromiseOrValue<string> | null,
      account?: PromiseOrValue<string> | null
    ): ProposeDelegateEventFilter;
    ProposeDelegate(
      delegate?: PromiseOrValue<string> | null,
      account?: PromiseOrValue<string> | null
    ): ProposeDelegateEventFilter;

    "ScheduleDurationChange(uint256)"(
      unlockTimestamp?: PromiseOrValue<BigNumberish> | null
    ): ScheduleDurationChangeEventFilter;
    ScheduleDurationChange(
      unlockTimestamp?: PromiseOrValue<BigNumberish> | null
    ): ScheduleDurationChangeEventFilter;

    "SetDelegate(address,address)"(
      delegate?: PromiseOrValue<string> | null,
      account?: PromiseOrValue<string> | null
    ): SetDelegateEventFilter;
    SetDelegate(
      delegate?: PromiseOrValue<string> | null,
      account?: PromiseOrValue<string> | null
    ): SetDelegateEventFilter;

    "Transfer(address,address,uint256)"(
      from?: PromiseOrValue<string> | null,
      to?: PromiseOrValue<string> | null,
      tokens?: null
    ): TransferEventFilter;
    Transfer(
      from?: PromiseOrValue<string> | null,
      to?: PromiseOrValue<string> | null,
      tokens?: null
    ): TransferEventFilter;
  };

  estimateGas: {
    available(
      account: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    balanceOf(
      account: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    decimals(overrides?: CallOverrides): Promise<BigNumber>;

    getStakes(
      account: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    stake(
      amount: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    stakeFor(
      account: PromiseOrValue<string>,
      amount: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    totalSupply(overrides?: CallOverrides): Promise<BigNumber>;

    unstake(
      amount: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;
  };

  populateTransaction: {
    available(
      account: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    balanceOf(
      account: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    decimals(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    getStakes(
      account: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    stake(
      amount: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    stakeFor(
      account: PromiseOrValue<string>,
      amount: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    totalSupply(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    unstake(
      amount: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;
  };
}
